generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type CartsItems {
  id            String               @map("_id")
  brand         String
  category      String
  count         Int
  deliveryPrice String
  description   String
  details       String
  images        String[]
  inventory     CartsItemsInventory?
  location      String
  name          String
  offers        String[]
  options       Json?
  price         String
  salePrice     String
  sales         CartsItemsSales?
  size          String
  stock         Boolean
  variant       Json?
  warranty      String
}

type CartsItemsInventory {
  categories CartsItemsInventoryCategories[]
  total      String
}

type CartsItemsInventoryCategories {
  value    String
  variants String[]
}

type CartsItemsSales {
  categories CartsItemsSalesCategories[]
  /// Multiple data types found: String: 66.7%, Int: 33.3% out of 3 sampled entries
  total      Json
}

type CartsItemsSalesCategories {
  value    String
  variants String[]
}

type ContractExpenses {
  date        String
  description String
  initiator   String
  price       String
}

type ContractPayments {
  amount String
  date   String
}

type ContractPurchases {
  date        String
  description String
  initiator   String
  price       String
}

type DeliveryPricesPrices {
  abuja         String
  asaba         String
  awka          String
  bayelsa       String
  delta         String
  edo           String
  enugu         String
  lagos         String
  owerri        String
  port_harcourt String @map("port harcourt")
}

type InventoryVariants {
  CHANNEL          InventoryVariantsChannel?
  Colour           InventoryVariantsColour?
  Gang             InventoryVariantsGang?
  Version          InventoryVariantsVersion?
  Video            InventoryVariantsVideo?
  Wattage          InventoryVariantsWattage?
  color            InventoryVariantsColor?
  gang             InventoryVariantsGang?
  single_or_double InventoryVariantsSingleOrDouble? @map("single or double")
}

type InventoryVariantsChannel {
  price String
  value String
}

type InventoryVariantsColor {
  price String?
  value String
}

type InventoryVariantsColour {
  value String
}

type InventoryVariantsGang {
  price String
  value String
}

type InventoryVariantsSingleOrDouble {
  price String
  value String
}

type InventoryVariantsVersion {
  value String
}

type InventoryVariantsVideo {
  price String
  value String
}

type InventoryVariantsWattage {
  price String
  value String
}

type InvoiceItems {
  brand       String?
  category    String?
  description String?
  details     String?
  /// Multiple data types found: String: 21%, Float: 79% out of 200 sampled entries
  id          Json
  images      String[]
  inventory   InvoiceItemsInventory?
  manual      Boolean?
  name        String
  offers      String[]
  options     InvoiceItemsOptions?
  price       String?
  quantity    Int
  /// Multiple data types found: String: 66%, Int: 34% out of 200 sampled entries
  salePrice   Json
  sales       InvoiceItemsSales?
  size        String?
  stock       Boolean?
  variant     InvoiceItemsVariant?
  warranty    String?
}

type InvoiceItemsInventory {
  categories InvoiceItemsInventoryCategories[]
  /// Multiple data types found: String: 87.1%, Int: 12.9% out of 31 sampled entries
  total      Json
}

type InvoiceItemsInventoryCategories {
  value    String
  variants String[]
}

type InvoiceItemsOptions {
  Colour            InvoiceItemsOptionsColour[]
  Gang              InvoiceItemsOptionsGang[]
  Opening_Direction InvoiceItemsOptionsOpeningDirection[] @map("Opening Direction")
  color             InvoiceItemsOptionsColor[]
  gang              InvoiceItemsOptionsGang[]
}

type InvoiceItemsOptionsColor {
  value String
}

type InvoiceItemsOptionsColour {
  value String
}

type InvoiceItemsOptionsGang {
  price String
  value String
}

type InvoiceItemsOptionsOpeningDirection {
  value String
}

type InvoiceItemsSales {
  categories InvoiceItemsSalesCategories[]
  /// Multiple data types found: String: 14.8%, Int: 85.2% out of 27 sampled entries
  total      Json
}

type InvoiceItemsSalesCategories {
  value    String
  variants String[]
}

type InvoiceItemsVariant {
  Colour            InvoiceItemsVariantColour?
  Gang              InvoiceItemsVariantGang?
  Opening_Direction InvoiceItemsVariantOpeningDirection? @map("Opening Direction")
  color             InvoiceItemsVariantColor?
  gang              InvoiceItemsVariantGang?
}

type InvoiceItemsVariantColor {
  value String
}

type InvoiceItemsVariantColour {
  value String
}

type InvoiceItemsVariantGang {
  price String
  value String
}

type InvoiceItemsVariantOpeningDirection {
  value String
}

type InvoiceStatus {
  balance   String
  completed Boolean
}

type OrderItems {
  id            String               @map("_id")
  brand         String
  category      String
  count         Int
  deliveryPrice String
  description   String
  details       String
  images        String[]
  inventory     OrderItemsInventory?
  location      String
  name          String
  offers        String[]
  options       Json?
  price         String
  salePrice     String
  sales         OrderItemsSales?
  size          String
  stock         Boolean
  variant       OrderItemsVariant?
  warranty      String
}

type OrderItemsInventory {
  /// Could not determine type: the field only had null or empty values in the sample set.
  categories Json?
  total      String
}

type OrderItemsSales {
  categories OrderItemsSalesCategories[]
  total      Int
}

type OrderItemsSalesCategories {
  value    String
  variants String[]
}

type OrderItemsVariant {
  gang String
}

type ProductInventory {
  categories ProductInventoryCategories[]
  /// Multiple data types found: String: 98%, Int: 2% out of 50 sampled entries
  total      Json
}

type ProductInventoryCategories {
  value    String
  variants String[]
}

type ProductSales {
  categories ProductSalesCategories[]
  /// Multiple data types found: String: 88.9%, Int: 11.1% out of 9 sampled entries
  total      Json
}

type ProductSalesCategories {
  value    String
  variants String[]
}

type StaffSocials {
  facebook  String
  instagram String
  linkedin  String
  whatsapp  String
  x         String
}

model Ad {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  publicId String
  title    String
}

model Contract {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  completed   Boolean
  description String
  expenses    ContractExpenses[]
  payments    ContractPayments[]
  purchases   ContractPurchases[]
  signedAt    DateTime            @db.Date
  totalCost   String
}

model DeliveryPrices {
  id     String               @id @default(auto()) @map("_id") @db.ObjectId
  prices DeliveryPricesPrices
  size   String
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  approved    Boolean
  createdAt   DateTime @db.Date
  description String
  initiator   String
  totalPrice  String
}

model Inventory {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  brand    String
  name     String
  total    BigInt
  variants InventoryVariants
}

model Invoice {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now()) @db.Date
  customerName String
  email        String
  items        InvoiceItems[]
  phoneNumber  String
  status       InvoiceStatus
  totalPrice   BigInt
  branchId     String?        @db.ObjectId

  branch Branch? @relation(fields: [branchId], references: [id])
}

model MobileAd {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  publicId String
  title    String
}

model OTP {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  otp    String
  reason String
}

model Offer {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  address     String
  amount      Int
  date        DateTime @default(now())
  delivered   Boolean  @default(false)
  email       String
  fullName    String
  items       Json[]
  location    String
  phoneNumber String
  reference   String
}

model Product {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  brand       String
  category    String
  description String
  details     String
  images      String[]
  inventory   ProductInventory?
  name        String            @unique
  offers      String[]
  options     Json?
  price       String
  salePrice   String
  sales       ProductSales?
  size        String
  stock       Boolean
  warranty    String

  Stock  Stock[]
  Sample Sample[]
}

model Purchases {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  approved    Boolean
  createdAt   DateTime @db.Date
  description String
  initiator   String
  totalPrice  String
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String?
  description String
  images      String[]
  name        String
  videoLink   String
}

model Staff {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  email       String
  image       String
  name        String
  phoneNumber String
  position    String
  rating      BigInt
  socials     StaffSocials
}

model carts {
  id    String       @id @default(auto()) @map("_id") @db.ObjectId
  v     Int          @map("__v")
  items CartsItems[]
  owner String
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String

  profile Profile?
}

model Profile {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  email          String  @unique
  fullName       String
  phoneNumber    String
  address        String
  state          String
  secondaryPhone String?

  user User @relation(fields: [email], references: [email])
}

model Branch {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String  @unique
  password String
  name     String
  address  String?
  phone    String?

  Stock  Stock[]
  Sample Sample[]

  Invoice Invoice[]
}

model Stock {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  branchId  String @db.ObjectId
  productId String @db.ObjectId
  variant   Json?
  quantity  Int

  product Product @relation(fields: [productId], references: [id])
  branch  Branch  @relation(fields: [branchId], references: [id])
}

model Sample {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  branchId   String @db.ObjectId
  productId  String @db.ObjectId
  receiverId String @db.ObjectId
  variant    Json?
  quantity   Int

  product  Product  @relation(fields: [productId], references: [id])
  branch   Branch   @relation(fields: [branchId], references: [id])
  receiver Receiver @relation(fields: [receiverId], references: [id])
}

model Receiver {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  phoneNumber String
  address     String?

  Sample Sample[]
}
